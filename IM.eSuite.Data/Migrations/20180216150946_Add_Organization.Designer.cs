// <auto-generated />
using IM.eSuite.Data;
using IM.eSuite.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IM.eSuite.Data.Migrations
{
    [DbContext(typeof(eSuiteDbContext))]
    [Migration("20180216150946_Add_Organization")]
    partial class Add_Organization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IM.eSuite.Domain.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cif");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("Cif")
                        .IsUnique()
                        .HasFilter("[Cif] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("IM.NETCore.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("IM.NETCore.Domain.Token", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Token");
                });

            modelBuilder.Entity("IM.NETCore.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("UserGroupId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("IM.NETCore.Domain.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("IM.NETCore.Domain.UserGroupRole", b =>
                {
                    b.Property<int>("UserGroupId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserGroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserGroupRole");
                });

            modelBuilder.Entity("IM.eSuite.Domain.Organization", b =>
                {
                    b.HasOne("IM.eSuite.Domain.Organization", "Parent")
                        .WithMany("SubOrganizations")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("IM.NETCore.Domain.Token", b =>
                {
                    b.HasOne("IM.NETCore.Domain.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("IM.NETCore.Domain.Token", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IM.NETCore.Domain.User", b =>
                {
                    b.HasOne("IM.NETCore.Domain.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IM.NETCore.Domain.UserGroupRole", b =>
                {
                    b.HasOne("IM.NETCore.Domain.Role", "Role")
                        .WithMany("UserGroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IM.NETCore.Domain.UserGroup", "UserGroup")
                        .WithMany("UserGroupRoles")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
